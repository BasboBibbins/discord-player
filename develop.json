{"meta":{"version":"0.4.0","format":20,"date":1659971061519},"custom":{"general":{"name":"General","files":{"welcome":{"name":"Welcome","type":"md","content":"# Discord Player\nComplete framework to facilitate music commands using **[discord.js](https://discord.js.org)**.\n\n[![downloadsBadge](https://img.shields.io/npm/dt/discord-player?style=for-the-badge)](https://npmjs.com/discord-player)\n[![versionBadge](https://img.shields.io/npm/v/discord-player?style=for-the-badge)](https://npmjs.com/discord-player)\n[![discordBadge](https://img.shields.io/discord/558328638911545423?style=for-the-badge&color=7289da)](https://androz2091.fr/discord)\n[![wakatime](https://wakatime.com/badge/github/Androz2091/discord-player.svg)](https://wakatime.com/badge/github/Androz2091/discord-player)\n[![CodeFactor](https://www.codefactor.io/repository/github/androz2091/discord-player/badge/v5)](https://www.codefactor.io/repository/github/androz2091/discord-player/overview/v5)\n\n## Installation\n\n### Install **[discord-player](https://npmjs.com/package/discord-player)**\n\n```sh\n$ npm install --save discord-player\n```\n\n### Install **[@discordjs/opus](https://npmjs.com/package/@discordjs/opus)**\n\n```sh\n$ npm install --save @discordjs/opus\n```\n\n### Install FFmpeg or Avconv\n- Official FFMPEG Website: **[https://www.ffmpeg.org/download.html](https://www.ffmpeg.org/download.html)**\n\n- Node Module (FFMPEG): **[https://npmjs.com/package/ffmpeg-static](https://npmjs.com/package/ffmpeg-static)**\n\n- Avconv: **[https://libav.org/download](https://libav.org/download)**\n\n# Features\n- Simple & easy to use 🤘\n- Beginner friendly 😱\n- Audio filters 🎸\n- Lightweight ☁️\n- Custom extractors support 🌌\n- Multiple sources support ✌\n- Play in multiple servers at the same time 🚗\n- Does not inject anything to discord.js or your discord.js client 💉\n- Allows you to have full control over what is going to be streamed 👑\n\n## [Documentation](https://discord-player.js.org)\n\n## Getting Started\n\nFirst of all, you will need to register slash commands:\n\n```js\nconst { REST } = require(\"@discordjs/rest\");\nconst { Routes, ApplicationCommandOptionType } = require(\"discord.js\");\n\nconst commands = [\n  {\n    name: \"play\",\n    description: \"Plays a song!\",\n    options: [\n        {\n            name: \"query\",\n            type: ApplicationCommandOptionType.String,\n            description: \"The song you want to play\",\n            required: true\n        }\n    ]\n  }\n];\n\nconst rest = new REST({ version: \"10\" }).setToken(\"BOT_TOKEN\");\n\n(async () => {\n  try {\n    console.log(\"Started refreshing application [/] commands.\");\n\n    await rest.put(Routes.applicationGuildCommands(CLIENT_ID, GUILD_ID), { body: commands });\n\n    console.log(\"Successfully reloaded application [/] commands.\");\n  } catch(error) {\n    console.error(error);\n  }\n})();\n```\n\nNow you can implement your bot's logic:\n\n```js\nconst { Client } = require(\"discord.js\");\nconst client = new Discord.Client({\n    intents: [\n        \"Guilds\",\n        \"GuildVoiceStates\"\n    ]\n});\nconst { Player } = require(\"discord-player\");\n\n// Create a new Player (you don't need any API Key)\nconst player = new Player(client);\n\n// add the trackStart event so when a song will be played this message will be sent\nplayer.on(\"trackStart\", (queue, track) => queue.metadata.channel.send(`🎶 | Now playing **${track.title}**!`))\n\nclient.once(\"ready\", () => {\n    console.log(\"I'm ready !\");\n});\n\nclient.on(\"interactionCreate\", async (interaction) => {\n    if (!interaction.isChatInputCommand()) return;\n\n    // /play track:Despacito\n    // will play \"Despacito\" in the voice channel\n    if (interaction.commandName === \"play\") {\n        if (!interaction.member.voice.channelId) return await interaction.reply({ content: \"You are not in a voice channel!\", ephemeral: true });\n        if (interaction.guild.members.me.voice.channelId && interaction.member.voice.channelId !== interaction.guild.members.me.voice.channelId) return await interaction.reply({ content: \"You are not in my voice channel!\", ephemeral: true });\n        const query = interaction.options.getString(\"query\");\n        const queue = player.createQueue(interaction.guild, {\n            metadata: {\n                channel: interaction.channel\n            }\n        });\n        \n        // verify vc connection\n        try {\n            if (!queue.connection) await queue.connect(interaction.member.voice.channel);\n        } catch {\n            queue.destroy();\n            return await interaction.reply({ content: \"Could not join your voice channel!\", ephemeral: true });\n        }\n\n        await interaction.deferReply();\n        const track = await player.search(query, {\n            requestedBy: interaction.user\n        }).then(x => x.tracks[0]);\n        if (!track) return await interaction.followUp({ content: `❌ | Track **${query}** not found!` });\n\n        queue.play(track);\n\n        return await interaction.followUp({ content: `⏱️ | Loading track **${track.title}**!` });\n    }\n});\n\nclient.login(\"BOT_TOKEN\");\n```\n\n## Supported websites\n\nBy default, discord-player supports **YouTube**, **Spotify** and **SoundCloud** streams only.\n\n### Optional dependencies\n\nDiscord Player provides an **Extractor API** that enables you to use your custom stream extractor with it. Some packages have been made by the community to add new features using this API.\n\n#### [@discord-player/extractor](https://github.com/DevAndromeda/discord-player-extractors) (optional)\n\nOptional package that adds support for `vimeo`, `reverbnation`, `facebook`, `attachment links` and `lyrics`.\nYou just need to install it using `npm i --save @discord-player/extractor` (discord-player will automatically detect and use it).\n\n#### [@discord-player/downloader](https://github.com/DevAndromeda/discord-player-downloader) (optional)\n\n`@discord-player/downloader` is an optional package that brings support for +700 websites. The documentation is available [here](https://github.com/DevAndromeda/discord-player-downloader).\n\n## Examples of bots made with Discord Player\n\nThese bots are made by the community, they can help you build your own!\n\n* **[Discord Music Bot](https://github.com/Androz2091/discord-music-bot)** by [Androz2091](https://github.com/Androz2091)\n* [Dodong](https://github.com/nizeic/Dodong) by [nizeic](https://github.com/nizeic)\n* [Musico](https://github.com/Whirl21/Musico) by [Whirl21](https://github.com/Whirl21)\n* [Eyesense-Music-Bot](https://github.com/naseif/Eyesense-Music-Bot) by [naseif](https://github.com/naseif)\n* [Music-bot](https://github.com/ZerioDev/Music-bot) by [ZerioDev](https://github.com/ZerioDev)\n* [AtlantaBot](https://github.com/Androz2091/AtlantaBot) by [Androz2091](https://github.com/Androz2091) (**outdated**)\n* [Discord-Music](https://github.com/inhydrox/discord-music) by [inhydrox](https://github.com/inhydrox) (**outdated**)\n\n## Advanced\n\n### Smooth Volume\n\nDiscord Player will by default try to implement this. If smooth volume does not work, you need to add this line at the top of your main file:\n\n```js\n// CJS\nrequire(\"discord-player/smoothVolume\");\n\n// ESM\nimport \"discord-player/smoothVolume\"\n```\n\n> ⚠️ Make sure that line is situated at the **TOP** of your **main** file.\n\n### Use cookies\n\n```js\nconst player = new Player(client, {\n    ytdlOptions: {\n        requestOptions: {\n            headers: {\n                cookie: \"YOUR_YOUTUBE_COOKIE\"\n            }\n        }\n    }\n});\n```\n\n### Use custom proxies\n\n```js\nconst HttpsProxyAgent = require(\"https-proxy-agent\");\n\n// Remove \"user:pass@\" if you don't need to authenticate to your proxy.\nconst proxy = \"http://user:pass@111.111.111.111:8080\";\nconst agent = HttpsProxyAgent(proxy);\n\nconst player = new Player(client, {\n    ytdlOptions: {\n        requestOptions: { agent }\n    }\n});\n```\n\n> You may also create a simple proxy server and forward requests through it.\n> See **[https://github.com/http-party/node-http-proxy](https://github.com/http-party/node-http-proxy)** for more info.\n\n### Custom stream Engine\n\nDiscord Player by default uses **[node-ytdl-core](https://github.com/fent/node-ytdl-core)** for youtube and some other extractors for other sources.\nIf you need to modify this behavior without touching extractors, you need to use `createStream` functionality of discord player.\nHere's an example on how you can use **[play-dl](https://npmjs.com/package/play-dl)** to download youtube streams instead of using ytdl-core.\n\n```js\nconst playdl = require(\"play-dl\");\n\n// other code\nconst queue = player.createQueue(..., {\n    ...,\n    async onBeforeCreateStream(track, source, _queue) {\n        // only trap youtube source\n        if (source === \"youtube\") {\n            // track here would be youtube track\n            return (await playdl.stream(track.url, { discordPlayerCompatibility : true })).stream;\n            // we must return readable stream or void (returning void means telling discord-player to look for default extractor)\n        }\n    }\n});\n```\n\n`<Queue>.onBeforeCreateStream` is called before actually downloading the stream. It is a different concept from extractors, where you are **just** downloading\nstreams. `source` here will be a video source. Streams from `onBeforeCreateStream` are then piped to `FFmpeg` and finally sent to Discord voice servers.\n","path":"README.md"}}},"migrating":{"name":"Migrating","files":{"migrating":{"name":"Migrating to v5","type":"md","content":"# Migrating to Discord Player v5\n\nWe have introduced some breaking changes in Discord Player v5. Which means, your old code will no longer work with v5.\nThe new update brings new features as well as better management of different things. This also uses the new **[@discordjs/voice](https://github.com/discordjs/voice)** library!\n\n## Basic Example\n\n```diff\n- player.play(message, query);\n+ const queue = player.createQueue(message.guild);\n+ const song = await player.search(query, {\n+   requestedBy: message.author\n});\n+ \n+ try {\n+   await queue.connect(message.member.voice.channel);\n+ } catch {\n+   message.reply(\"Could not join your voice channel\");\n+ }\n+\n+ queue.addTrack(song.tracks[0]);\n+ queue.play();\n```\n\n> Everything related to music player is moved to `Queue`.\n\n## How do I reply to the event like v4?\n\nSince we got rid of `message` parameter in every method of the Discord Player, you no longer have access to the `message` object in events.\nInstead, we have added `<Queue>.metadata` prop as an alternative. This `metadata` can be anything, declared while creating queue:\n\n```js\nconst queue = player.createQueue(message.guild, {\n    metadata: message\n});\n```\n\nThe metadata `message` will always be available in every event emitted for that specific `Queue`. You can access it via `queue.metadata`:\n\n```js\nplayer.on(\"trackStart\", (queue, track) => {\n    const channel = queue.metadata.channel; // queue.metadata is your \"message\" object\n    channel.send(`🎶 | Started playing **${track.title}**`);\n});\n```\n\n## How do I stop the player\n\nYou have to use `<Queue>.destroy()` to destroy the queue. It will also stop the player.\n\n```js\nconst queue = player.getQueue(message.guild.id);\nif (queue) queue.destroy();\n```\n\n## Updating filters\n\nDiscord Player v5.x has new option `bufferingTimeout` in queue init options which allows you to set stream buffering timeout before playing.\nThis might be useful if you want to have smooth filters update. By default, it is set to 3 seconds.\n","path":"docs/migrating/migrating.md"}}},"extractors":{"name":"Extractors","files":{"extractor":{"name":"Extractors API","type":"md","content":"# Discord Player Extractor API\nThe Extractor API allows you to build your own stream extractor for **Discord Player**.\n\n# Example Extractor\nYour extractor should have 2 methods (required):\n - `validate(query): boolean`\n   \n   This method is called by Discord Player while validating the query provided via `Player.search()`. (Note that only `string` queries are passed to your extractor)\n\n - `getInfo(query): object`\n   \n   This method is used by Discord Player to create `Track` object. You can return your data here that gets passed to `Track`.\n   Your info must be similar to this:\n\n    ```js\n    {\n        // the title\n        title: \"Extracted by custom extractor\",\n        // the duration in ms\n        duration: 20000,\n        // the thumbnail\n        thumbnail: \"some thumbnail link\",\n        // engine, can be Readable streams or link to raw stream that gets played\n        engine: \"someStreamLink\",\n        // number of views\n        views: 0,\n        // author of this stream\n        author: \"Some Artist\",\n        // description\n        description: \"\",\n        // link of this stream\n        url: \"Some Link\"\n    }\n    ```\n\n - `version: string`\n\n   This should be the version of your extractor. It is not really important and is set to `0.0.0` by default.\n\n# Loading Extractors\nDiscord Player Extractors can be loaded using `Player.use(ExtractorName, Extractor)` method.\n\n## Register Extractor\n\n```js\nconst myExtractor = {\n  version: \"1.0.0\",\n  important: false,\n  validate: (query) => true,\n  getInfo: async (query) => {\n    return {\n        title: \"Extracted by custom extractor\",\n        duration: 20000,\n        thumbnail: \"some thumbnail link\",\n        engine: \"someStreamLink\",\n        views: 0,\n        author: \"Some Artist\",\n        description: \"\",\n        url: \"Some Link\"\n    };\n  }\n};\n\nplayer.use(\"GiveItSomeName\", myExtractor);\n```\n\n## Remove Extractor\n\n```js\nplayer.unuse(\"GiveItSomeName\");\n```\n\n# Readymade Extractors\n## **[@discord-player/extractor](https://github.com/Snowflake107/discord-player-extractors)**\nThis extractor enables optional sources such as `Discord Attachments`, `Vimeo`, `Facebook` and `Reverbnation`. It also enables the `Lyrics` feature!\n\n## **[@discord-player/downloader](https://github.com/DevSnowflake/discord-player-downloader)**\nThis extractor is based on **[YouTube DL](https://youtube-dl.org)**. This extractor enables `700+ websites` support. However, this extractor can get buggy and is not updated frequently. So, it is suggested to make your own extractor if you want to use it!\n\n```js\nconst downloader = require(\"@discord-player/downloader\").Downloader;\n\nplayer.use(\"YOUTUBE_DL\", downloader);\n```\n\n> Discord Player auto-detects and uses `@discord-player/extractor` if it is installed!\n","path":"docs/extractors/extractor.md"},"create_stream":{"name":"Creating Stream","type":"md","content":"# Create Stream\n\nThis is a checkpoint where discord-player calls `createStream` before downloading stream.\n\n### Custom stream Engine\n\nDiscord Player by default uses **[node-ytdl-core](https://github.com/fent/node-ytdl-core)** for youtube and some other extractors for other sources.\nIf you need to modify this behavior without touching extractors, you need to use `createStream` functionality of discord player.\nHere's an example on how you can use **[play-dl](https://npmjs.com/package/play-dl)** to download youtube streams instead of using ytdl-core.\n\n```js\nconst playdl = require(\"play-dl\");\n\n// other code\nconst queue = player.createQueue(..., {\n    ...,\n    async onBeforeCreateStream(track, source, _queue) {\n        // only trap youtube source\n        if (source === \"youtube\") {\n            // track here would be youtube track\n            return (await playdl.stream(track.url, { discordPlayerCompatibility : true })).stream;\n            // we must return readable stream or void (returning void means telling discord-player to look for default extractor)\n        }\n    }\n});\n```\n\n`<Queue>.onBeforeCreateStream` is called before actually downloading the stream. It is a different concept from extractors, where you are **just** downloading\nstreams. `source` here will be a video source. Streams from `onBeforeCreateStream` are then piped to `FFmpeg` and finally sent to Discord voice servers.\n\n# FAQ\n## How can I remove this?\n\n> If you already made this change and want to switch to default mode in runtime,\n> you can set `queue.onBeforeCreateStream` to `null` which will make `discord-player` use default config.\n\n## Which stream format should I return?\n\n> It's not necessary to return opus format or whatever, since every streams have to be converted to s16le, due to inline volume.\n\n## Can I use ytdl-core-discord?\n\n> Yes, you can.\n\n## Can I use this for other sources, like soundcloud?\n\n> Absolutely.\n\n## This is not working properly\n\n> `onBeforeCreateStream` may not work properly if you have `spotifyBridge` enabled (enabled by default).","path":"docs/extractors/create_stream.md"}}},"faq":{"name":"FAQ","files":{"custom_filters":{"name":"Custom Filters","type":"md","content":"# How to add custom audio filters?\n\nAudio filters in **Discord Player** are **[FFmpeg audio filters](http://ffmpeg.org/ffmpeg-all.html#Audio-Filters)**. You can add your own audio filter like this:\n\n```js\nconst { AudioFilters } = require(\"discord-player\");\n\nAudioFilters.define(\"3D\", \"apulsator=hz=0.128\");\n\n// later, it can be used like this\nqueue.setFilters({ \"3D\": true });\n```","path":"docs/faq/custom_filters.md"},"slash_commands":{"name":"Slash Commands","type":"md","content":"# Slash Commands Example\n\nYou can use Discord Player with slash commands. **[Here](https://github.com/Androz2091/discord-player/blob/master/example/music-bot)** is an example on how to use this framework with slash commands.\n","path":"docs/faq/slash_commands.md"},"how_does_it_work":{"name":"How Does It Work","type":"md","content":"# How does Discord Player actually work?\n\n- Discord Player can be used by first initializing `Player` class with your discord.js client. Discord Player uses `Queue` to assign queue manager to individual guild.\nWhich means each guild will have its own queue object. Every player action has to go through the `Queue` object for example, `play`, `pause`, `volume` etc.\n\n- When `Player` is initialized, it creates a cache to store external extractors or queues information. Queue is created by calling `createQueue` method of `Player` instance.\nA client should have only one `Player` instance, otherwise it will be complicated to track queues and other metadata.\n\n- Searching tracks can be done via `search` method of `Player` instance. Discord Player offers `search engine` option to target specific searches. Discord Player first\ncalls all the registered extractors first with the search query. If all external extractors failed to validate the query, player then passes the query to built-in extractors.\nInvalid or unknown queries may return `arbitrary` result.\n\n- The track result obtained from `search` can be loaded into `Queue` by calling `queue.addTrack`/`queue.addTracks`/`queue.play`.\n\n- Player calls `onBeforeCreateStream` if user has enabled the function while creating queue. This method runs each time before stream is downloaded. Users may use it\nto modify how and which stream will be played.\n\n- Queue is based on FIFO method (First In First Out)\n\n- Final stream is a pcm format, required for volume controls which is created by Discord Player itself.\n\n- Since inline volume is enabled by default for volume controls, you may face more resource usage.\n\n- You can disable inline volume for better performance but setting volume won't work and current volume will always be 100.\n\n- All the audio filters are handled by FFmpeg and stream has to reload in order to update filters.\n","path":"docs/faq/how_does_it_work.md"}}},"youtube":{"name":"YouTube","files":{"cookies":{"name":"Using Cookies","type":"md","content":"# Using Cookies to avoid 429\n\n```js\nconst { Player } = require(\"discord-player\");\n\nconst player = new Player(client, {\n    ytdlOptions: {\n        requestOptions: {\n            headers: {\n                cookie: \"YOUR_YOUTUBE_COOKIE\"\n            }\n        }\n    }\n});\n```\n\n> Keep in mind that using `cookies` after getting `429` **does not fix the problem**.\n> You should use `cookies` before getting `429` which helps to **_reduce_** `Error: Status Code 429`","path":"docs/youtube/cookies.md"},"proxy":{"name":"Using Proxy","type":"md","content":"# Using Proxy to avoid 429\n\n```js\nconst { Player } = require(\"discord-player\");\nconst HttpsProxyAgent = require(\"https-proxy-agent\");\n\n// Remove \"user:pass@\" if you don't need to authenticate to your proxy.\nconst proxy = \"http://user:pass@111.111.111.111:8080\";\nconst agent = HttpsProxyAgent(proxy);\n\nconst player = new Player(client, {\n    ytdlOptions: {\n        requestOptions: { agent }\n    }\n});\n```\n\n> You may also create a simple proxy server and forward requests through it.\n> See **[https://github.com/http-party/node-http-proxy](https://github.com/http-party/node-http-proxy)** for more info.","path":"docs/youtube/proxy.md"}}}},"classes":[{"name":"AudioFilters","construct":{"name":"constructor","returns":[[["AudioFilters"]]],"meta":{"line":6,"file":"AudioFilters.ts","path":"src/utils"}},"methods":[{"name":"[iterator]","scope":"static","returns":[[["IterableIterator","<{"],["\nname",": "],["keyof"," "],["QueueFilters",","],["\nvalue",": "],["string\n","}>"]]],"meta":{"line":56,"file":"AudioFilters.ts","path":"src/utils"}},{"name":"create","scope":"static","params":[{"name":"filters","optional":true,"type":[[["Array","<"],["K",">"]]]}],"returns":[[["string"]]],"meta":{"line":80,"file":"AudioFilters.ts","path":"src/utils"}},{"name":"define","scope":"static","params":[{"name":"filterName","optional":false,"type":[[["string"]]]},{"name":"value","optional":false,"type":[[["string"]]]}],"returns":[[["void"]]],"meta":{"line":93,"file":"AudioFilters.ts","path":"src/utils"}},{"name":"defineBulk","scope":"static","params":[{"name":"filtersArray","optional":false,"type":[[["Array","<{"],["\nname",": "],["string",","],["\nvalue",": "],["string\n","}>"]]]}],"returns":[[["void"]]],"meta":{"line":101,"file":"AudioFilters.ts","path":"src/utils"}},{"name":"get","scope":"static","params":[{"name":"name","optional":false,"type":[[["K"]]]}],"returns":[[["Record","<"],["keyof"," "],["QueueFilters",", "],["string",">["],["K","]"]]],"meta":{"line":48,"file":"AudioFilters.ts","path":"src/utils"}},{"name":"has","scope":"static","params":[{"name":"name","optional":false,"type":[[["K"]]]}],"returns":[[["boolean"]]],"meta":{"line":52,"file":"AudioFilters.ts","path":"src/utils"}},{"name":"toString","scope":"static","returns":[[["string"]]],"meta":{"line":71,"file":"AudioFilters.ts","path":"src/utils"}}],"meta":{"line":5,"file":"AudioFilters.ts","path":"src/utils"}},{"name":"ExtractorModel","construct":{"name":"constructor","params":[{"name":"extractorName","optional":false,"type":[[["string"]]]},{"name":"data","optional":false,"type":[[["any"]]]}],"returns":[[["ExtractorModel"]]],"meta":{"line":13,"file":"ExtractorModel.ts","path":"src/Structures"}},"props":[{"name":"_raw","access":"private","type":[[["any"]]],"meta":{"line":5,"file":"ExtractorModel.ts","path":"src/Structures"}},{"name":"name","type":[[["string"]]],"meta":{"line":4,"file":"ExtractorModel.ts","path":"src/Structures"}}],"methods":[{"name":"handle","params":[{"name":"query","optional":false,"type":[[["string"]]]}],"returns":[[["Promise","<"],["ExtractorModelData",">"]]],"meta":{"line":34,"file":"ExtractorModel.ts","path":"src/Structures"}},{"name":"validate","params":[{"name":"query","optional":false,"type":[[["string"]]]}],"returns":[[["boolean"]]],"meta":{"line":60,"file":"ExtractorModel.ts","path":"src/Structures"}}],"meta":{"line":3,"file":"ExtractorModel.ts","path":"src/Structures"}},{"name":"Player","extends":["TypedEmitter<PlayerEvents>"],"construct":{"name":"constructor","params":[{"name":"client","optional":false,"type":[[["Client","<"],["boolean",">"]]]},{"name":"options","optional":true,"default":"{}","type":[[["PlayerInitOptions"]]]}],"returns":[[["Player"]]],"meta":{"line":39,"file":"Player.ts","path":"src"}},"props":[{"name":"client","readonly":true,"type":[[["Client","<"],["boolean",">"]]],"meta":{"line":21,"file":"Player.ts","path":"src"}},{"name":"extractors","readonly":true,"type":[[["Collection","<"],["string",", "],["ExtractorModel",">"]]],"meta":{"line":31,"file":"Player.ts","path":"src"}},{"name":"options","readonly":true,"type":[[["PlayerInitOptions"]]],"meta":{"line":22,"file":"Player.ts","path":"src"}},{"name":"queues","readonly":true,"type":[[["Collection","<"],["string",", "],["Queue","<"],["unknown",">>"]]],"meta":{"line":29,"file":"Player.ts","path":"src"}},{"name":"requiredEvents","type":[[["Array","<"],["string",">"]]],"meta":{"line":32,"file":"Player.ts","path":"src"}},{"name":"voiceUtils","readonly":true,"type":[[["VoiceUtils"]]],"meta":{"line":30,"file":"Player.ts","path":"src"}},{"name":"defaultMaxListeners","scope":"static","type":[[["number"]]],"meta":{"line":10,"file":"index.d.ts","path":"node_modules/tiny-typed-emitter/lib"}}],"methods":[{"name":"[iterator]","returns":[[["Generator","<"],["Queue","<"],["unknown",">, "],["void",", "],["undefined",">"]]],"meta":{"line":600,"file":"Player.ts","path":"src"}},{"name":"_handleVoiceState","access":"private","params":[{"name":"oldState","optional":false,"type":[[["VoiceState"]]]},{"name":"newState","optional":false,"type":[[["VoiceState"]]]}],"returns":[[["void"]]],"meta":{"line":76,"file":"Player.ts","path":"src"}},{"name":"addListener","params":[{"name":"event","optional":false,"type":[[["U"]]]},{"name":"listener","optional":false,"type":[[["PlayerEvents","["],["U","]"]]]}],"returns":[[["Player"]]],"meta":{"line":11,"file":"index.d.ts","path":"node_modules/tiny-typed-emitter/lib"}},{"name":"createPlaylist","params":[{"name":"data","optional":false,"type":[[["PlaylistInitData"]]]}],"returns":[[["Playlist"]]],"meta":{"line":608,"file":"Player.ts","path":"src"}},{"name":"createQueue","params":[{"name":"guild","optional":false,"type":[[["GuildResolvable"]]]},{"name":"queueInitOptions","optional":true,"default":"{}","type":[[["PlayerOptions"," & {"],["\nmetadata",": "],["T\n","}"]]]}],"returns":[[["Queue","<"],["T",">"]]],"meta":{"line":160,"file":"Player.ts","path":"src"}},{"name":"deleteQueue","params":[{"name":"guild","optional":false,"type":[[["GuildResolvable"]]]}],"returns":[[["Queue","<"],["T",">"]]],"meta":{"line":192,"file":"Player.ts","path":"src"}},{"name":"emit","params":[{"name":"eventName","optional":false,"type":[[["U"]]]},{"name":"args","optional":false,"type":[[["Parameters","<"],["PlayerEvents","["],["U","]>"]]],"variable":true}],"returns":[[["boolean"]]],"meta":{"line":580,"file":"Player.ts","path":"src"}},{"name":"eventNames","returns":[[["Array","<"],["U",">"]]],"meta":{"line":20,"file":"index.d.ts","path":"node_modules/tiny-typed-emitter/lib"}},{"name":"getMaxListeners","returns":[[["number"]]],"meta":{"line":24,"file":"index.d.ts","path":"node_modules/tiny-typed-emitter/lib"}},{"name":"getQueue","params":[{"name":"guild","optional":false,"type":[[["GuildResolvable"]]]}],"returns":[[["Queue","<"],["T",">"]]],"meta":{"line":181,"file":"Player.ts","path":"src"}},{"name":"listenerCount","params":[{"name":"type","optional":false,"type":[[["keyof"," "],["PlayerEvents"]]]}],"returns":[[["number"]]],"meta":{"line":21,"file":"index.d.ts","path":"node_modules/tiny-typed-emitter/lib"}},{"name":"listeners","params":[{"name":"type","optional":false,"type":[[["U"]]]}],"returns":[[["Array","<"],["PlayerEvents","["],["U","]>"]]],"meta":{"line":22,"file":"index.d.ts","path":"node_modules/tiny-typed-emitter/lib"}},{"name":"off","params":[{"name":"event","optional":false,"type":[[["U"]]]},{"name":"listener","optional":false,"type":[[["PlayerEvents","["],["U","]"]]]}],"returns":[[["Player"]]],"meta":{"line":18,"file":"index.d.ts","path":"node_modules/tiny-typed-emitter/lib"}},{"name":"on","params":[{"name":"event","optional":false,"type":[[["U"]]]},{"name":"listener","optional":false,"type":[[["PlayerEvents","["],["U","]"]]]}],"returns":[[["Player"]]],"meta":{"line":17,"file":"index.d.ts","path":"node_modules/tiny-typed-emitter/lib"}},{"name":"once","params":[{"name":"event","optional":false,"type":[[["U"]]]},{"name":"listener","optional":false,"type":[[["PlayerEvents","["],["U","]"]]]}],"returns":[[["Player"]]],"meta":{"line":16,"file":"index.d.ts","path":"node_modules/tiny-typed-emitter/lib"}},{"name":"prependListener","params":[{"name":"event","optional":false,"type":[[["U"]]]},{"name":"listener","optional":false,"type":[[["PlayerEvents","["],["U","]"]]]}],"returns":[[["Player"]]],"meta":{"line":12,"file":"index.d.ts","path":"node_modules/tiny-typed-emitter/lib"}},{"name":"prependOnceListener","params":[{"name":"event","optional":false,"type":[[["U"]]]},{"name":"listener","optional":false,"type":[[["PlayerEvents","["],["U","]"]]]}],"returns":[[["Player"]]],"meta":{"line":13,"file":"index.d.ts","path":"node_modules/tiny-typed-emitter/lib"}},{"name":"rawListeners","params":[{"name":"type","optional":false,"type":[[["U"]]]}],"returns":[[["Array","<"],["PlayerEvents","["],["U","]>"]]],"meta":{"line":23,"file":"index.d.ts","path":"node_modules/tiny-typed-emitter/lib"}},{"name":"removeAllListeners","params":[{"name":"event","optional":true,"type":[[["keyof"," "],["PlayerEvents"]]]}],"returns":[[["Player"]]],"meta":{"line":15,"file":"index.d.ts","path":"node_modules/tiny-typed-emitter/lib"}},{"name":"removeListener","params":[{"name":"event","optional":false,"type":[[["U"]]]},{"name":"listener","optional":false,"type":[[["PlayerEvents","["],["U","]"]]]}],"returns":[[["Player"]]],"meta":{"line":14,"file":"index.d.ts","path":"node_modules/tiny-typed-emitter/lib"}},{"name":"resolveQueue","params":[{"name":"queueLike","optional":false,"type":[[["Queue","<"],["unknown","> | "],["GuildResolvable"]]]}],"returns":[[["Queue","<"],["T",">"]]],"meta":{"line":596,"file":"Player.ts","path":"src"}},{"name":"scanDeps","returns":[[["string"]]],"meta":{"line":569,"file":"Player.ts","path":"src"}},{"name":"search","params":[{"name":"query","optional":false,"type":[[["string"," | "],["Track"]]]},{"name":"options","optional":false,"type":[[["SearchOptions"]]]}],"returns":[[["Promise","<"],["PlayerSearchResult",">"]]],"meta":{"line":216,"file":"Player.ts","path":"src"}},{"name":"setMaxListeners","params":[{"name":"n","optional":false,"type":[[["number"]]]}],"returns":[[["Player"]]],"meta":{"line":25,"file":"index.d.ts","path":"node_modules/tiny-typed-emitter/lib"}},{"name":"unuse","params":[{"name":"extractorName","optional":false,"type":[[["string"]]]}],"returns":[[["ExtractorModel"]]],"meta":{"line":558,"file":"Player.ts","path":"src"}},{"name":"use","params":[{"name":"extractorName","optional":false,"type":[[["string"]]]},{"name":"extractor","optional":false,"type":[[["any"]]]},{"name":"force","optional":true,"default":"false","type":[[["boolean"]]]}],"returns":[[["ExtractorModel"]]],"meta":{"line":535,"file":"Player.ts","path":"src"}}],"meta":{"line":20,"file":"Player.ts","path":"src"}},{"name":"PlayerError","extends":["Error"],"construct":{"name":"constructor","params":[{"name":"message","optional":false,"type":[[["string"]]]},{"name":"code","optional":true,"default":"ErrorStatusCode.PLAYER_ERROR","type":[[["ErrorStatusCode"]]]}],"returns":[[["PlayerError"]]],"meta":{"line":23,"file":"PlayerError.ts","path":"src/Structures"}},"props":[{"name":"createdAt","type":[[["Date"]]],"meta":{"line":21,"file":"PlayerError.ts","path":"src/Structures"}},{"name":"message","type":[[["string"]]],"meta":{"line":19,"file":"PlayerError.ts","path":"src/Structures"}},{"name":"name","type":[[["string"]]],"meta":{"line":1028,"file":"lib.es5.d.ts","path":"node_modules/typescript/lib"}},{"name":"stack","type":[[["string"]]],"meta":{"line":1030,"file":"lib.es5.d.ts","path":"node_modules/typescript/lib"}},{"name":"statusCode","type":[[["ErrorStatusCode"]]],"meta":{"line":20,"file":"PlayerError.ts","path":"src/Structures"}},{"name":"prepareStackTrace","scope":"static","type":[[["("],["err",": "],["Error",", "],["stackTraces",": "],["Array","<"],["CallSite",">) => "],["any"]]],"meta":{"line":11,"file":"globals.d.ts","path":"node_modules/@types/node"}},{"name":"stackTraceLimit","scope":"static","type":[[["number"]]],"meta":{"line":13,"file":"globals.d.ts","path":"node_modules/@types/node"}}],"methods":[{"name":"toJSON","returns":[[["{"],["\ncode",": "],["ErrorStatusCode",","],["\ncreated",": "],["number",","],["\nmessage",": "],["string",","],["\nstack",": "],["string\n","}"]]],"meta":{"line":41,"file":"PlayerError.ts","path":"src/Structures"}},{"name":"toString","returns":[[["string"]]],"meta":{"line":50,"file":"PlayerError.ts","path":"src/Structures"}},{"name":"valueOf","returns":[[["ErrorStatusCode"]]],"meta":{"line":37,"file":"PlayerError.ts","path":"src/Structures"}},{"name":"captureStackTrace","scope":"static","params":[{"name":"targetObject","optional":false,"type":[[["object"]]]},{"name":"constructorOpt","optional":true,"type":[[["Function"]]]}],"returns":[[["void"]]],"meta":{"line":4,"file":"globals.d.ts","path":"node_modules/@types/node"}}],"meta":{"line":18,"file":"PlayerError.ts","path":"src/Structures"}},{"name":"Playlist","construct":{"name":"constructor","params":[{"name":"player","optional":false,"type":[[["Player"]]]},{"name":"data","optional":false,"type":[[["PlaylistInitData"]]]}],"returns":[[["Playlist"]]],"meta":{"line":26,"file":"Playlist.ts","path":"src/Structures"}},"props":[{"name":"author","type":[[["{"],["\nname",": "],["string",","],["\nurl",": "],["string\n","}"]]],"meta":{"line":13,"file":"Playlist.ts","path":"src/Structures"}},{"name":"description","type":[[["string"]]],"meta":{"line":9,"file":"Playlist.ts","path":"src/Structures"}},{"name":"id","type":[[["string"]]],"meta":{"line":17,"file":"Playlist.ts","path":"src/Structures"}},{"name":"player","readonly":true,"type":[[["Player"]]],"meta":{"line":6,"file":"Playlist.ts","path":"src/Structures"}},{"name":"rawPlaylist","readonly":true,"type":[[["any"]]],"meta":{"line":19,"file":"Playlist.ts","path":"src/Structures"}},{"name":"source","type":[[["TrackSource"]]],"meta":{"line":12,"file":"Playlist.ts","path":"src/Structures"}},{"name":"thumbnail","type":[[["string"]]],"meta":{"line":10,"file":"Playlist.ts","path":"src/Structures"}},{"name":"title","type":[[["string"]]],"meta":{"line":8,"file":"Playlist.ts","path":"src/Structures"}},{"name":"tracks","type":[[["Array","<"],["Track",">"]]],"meta":{"line":7,"file":"Playlist.ts","path":"src/Structures"}},{"name":"type","type":[[["'album'"," | "],["'playlist'"]]],"meta":{"line":11,"file":"Playlist.ts","path":"src/Structures"}},{"name":"url","type":[[["string"]]],"meta":{"line":18,"file":"Playlist.ts","path":"src/Structures"}}],"methods":[{"name":"[iterator]","returns":[[["Generator","<"],["Track",", "],["void",", "],["undefined",">"]]],"meta":{"line":110,"file":"Playlist.ts","path":"src/Structures"}},{"name":"toJSON","params":[{"name":"withTracks","optional":true,"default":"true","type":[[["boolean"]]]}],"returns":[[["PlaylistJSON"]]],"meta":{"line":119,"file":"Playlist.ts","path":"src/Structures"}}],"meta":{"line":5,"file":"Playlist.ts","path":"src/Structures"}},{"name":"QueryResolver","construct":{"name":"constructor","access":"private","returns":[[["QueryResolver"]]],"meta":{"line":23,"file":"QueryResolver.ts","path":"src/utils"}},"methods":[{"name":"getVimeoID","scope":"static","params":[{"name":"query","optional":false,"type":[[["string"]]]}],"returns":[[["string"]]],"meta":{"line":51,"file":"QueryResolver.ts","path":"src/utils"}},{"name":"resolve","scope":"static","params":[{"name":"query","optional":false,"type":[[["string"]]]}],"returns":[[["QueryType"]]],"meta":{"line":30,"file":"QueryResolver.ts","path":"src/utils"}}],"meta":{"line":19,"file":"QueryResolver.ts","path":"src/utils"}},{"name":"Queue","construct":{"name":"constructor","params":[{"name":"player","optional":false,"type":[[["Player"]]]},{"name":"guild","optional":false,"type":[[["Guild"]]]},{"name":"options","optional":true,"default":"{}","type":[[["PlayerOptions"]]]}],"returns":[[["Queue","<"],["T",">"]]],"meta":{"line":41,"file":"Queue.ts","path":"src/Structures"}},"props":[{"name":"#destroyed","access":"private","default":"false","type":[[["boolean"]]],"meta":{"line":32,"file":"Queue.ts","path":"src/Structures"}},{"name":"#lastVolume","access":"private","default":"0","type":[[["number"]]],"meta":{"line":31,"file":"Queue.ts","path":"src/Structures"}},{"name":"_activeFilters","access":"private","default":"[]","type":[[["Array","<"],["any",">"]]],"meta":{"line":29,"file":"Queue.ts","path":"src/Structures"}},{"name":"_cooldownsTimeout","type":[[["Collection","<"],["string",", "],["Timeout",">"]]],"meta":{"line":28,"file":"Queue.ts","path":"src/Structures"}},{"name":"_filtersUpdate","access":"private","default":"false","type":[[["boolean"]]],"meta":{"line":30,"file":"Queue.ts","path":"src/Structures"}},{"name":"_streamTime","access":"private","default":"0","type":[[["number"]]],"meta":{"line":27,"file":"Queue.ts","path":"src/Structures"}},{"name":"connection","type":[[["StreamDispatcher"]]],"meta":{"line":19,"file":"Queue.ts","path":"src/Structures"}},{"name":"guild","readonly":true,"type":[[["Guild"]]],"meta":{"line":17,"file":"Queue.ts","path":"src/Structures"}},{"name":"id","readonly":true,"type":[[["string"]]],"meta":{"line":26,"file":"Queue.ts","path":"src/Structures"}},{"name":"metadata","default":"null","type":[[["T"]]],"meta":{"line":24,"file":"Queue.ts","path":"src/Structures"}},{"name":"onBeforeCreateStream","default":"null","type":[[["("],["track",": "],["Track",", "],["source",": "],["TrackSource",", "],["queue",": "],["Queue","<"],["unknown",">) => "],["Promise","<"],["Readable",">"]]],"meta":{"line":33,"file":"Queue.ts","path":"src/Structures"}},{"name":"options","type":[[["PlayerOptions"]]],"meta":{"line":22,"file":"Queue.ts","path":"src/Structures"}},{"name":"player","readonly":true,"type":[[["Player"]]],"meta":{"line":18,"file":"Queue.ts","path":"src/Structures"}},{"name":"playing","default":"false","type":[[["boolean"]]],"meta":{"line":23,"file":"Queue.ts","path":"src/Structures"}},{"name":"previousTracks","default":"[]","type":[[["Array","<"],["Track",">"]]],"meta":{"line":21,"file":"Queue.ts","path":"src/Structures"}},{"name":"repeatMode","default":"0","type":[[["QueueRepeatMode"]]],"meta":{"line":25,"file":"Queue.ts","path":"src/Structures"}},{"name":"tracks","default":"[]","type":[[["Array","<"],["Track",">"]]],"meta":{"line":20,"file":"Queue.ts","path":"src/Structures"}}],"methods":[{"name":"#getBufferingTimeout","access":"private","returns":[[["number"]]],"meta":{"line":774,"file":"Queue.ts","path":"src/Structures"}},{"name":"#watchDestroyed","access":"private","params":[{"name":"emit","optional":true,"default":"true","type":[[["boolean"]]]}],"returns":[[["boolean"]]],"meta":{"line":765,"file":"Queue.ts","path":"src/Structures"}},{"name":"[iterator]","returns":[[["Generator","<"],["Track",", "],["void",", "],["undefined",">"]]],"meta":{"line":735,"file":"Queue.ts","path":"src/Structures"}},{"name":"_handleAutoplay","access":"private","params":[{"name":"track","optional":false,"type":[[["Track"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":701,"file":"Queue.ts","path":"src/Structures"}},{"name":"addTrack","params":[{"name":"track","optional":false,"type":[[["Track"]]]}],"returns":[[["void"]]],"meta":{"line":244,"file":"Queue.ts","path":"src/Structures"}},{"name":"addTracks","params":[{"name":"tracks","optional":false,"type":[[["Array","<"],["Track",">"]]]}],"returns":[[["void"]]],"meta":{"line":255,"file":"Queue.ts","path":"src/Structures"}},{"name":"back","returns":[[["Promise","<"],["void",">"]]],"meta":{"line":426,"file":"Queue.ts","path":"src/Structures"}},{"name":"clear","returns":[[["void"]]],"meta":{"line":437,"file":"Queue.ts","path":"src/Structures"}},{"name":"connect","params":[{"name":"channel","optional":false,"type":[[["GuildChannelResolvable"]]]}],"returns":[[["Promise","<"],["Queue","<"],["T",">>"]]],"meta":{"line":153,"file":"Queue.ts","path":"src/Structures"}},{"name":"createProgressBar","params":[{"name":"options","optional":true,"type":[[["PlayerProgressbarOptions"]]]}],"returns":[[["string"]]],"meta":{"line":579,"file":"Queue.ts","path":"src/Structures"}},{"name":"destroy","params":[{"name":"disconnect","optional":true,"type":[[["boolean"]]]}],"returns":[[["void"]]],"meta":{"line":218,"file":"Queue.ts","path":"src/Structures"}},{"name":"getFiltersDisabled","returns":[[["Array","<"],["keyof"," "],["QueueFilters",">"]]],"meta":{"line":358,"file":"Queue.ts","path":"src/Structures"}},{"name":"getFiltersEnabled","returns":[[["Array","<"],["keyof"," "],["QueueFilters",">"]]],"meta":{"line":349,"file":"Queue.ts","path":"src/Structures"}},{"name":"getPlayerTimestamp","returns":[[["{"],["\ncurrent",": "],["string",","],["\nend",": "],["string",","],["\nprogress",": "],["number\n","}"]]],"meta":{"line":559,"file":"Queue.ts","path":"src/Structures"}},{"name":"getTrackPosition","params":[{"name":"track","optional":false,"type":[[["string"," | "],["number"," | "],["Track"]]]}],"returns":[[["number"]]],"meta":{"line":496,"file":"Queue.ts","path":"src/Structures"}},{"name":"insert","params":[{"name":"track","optional":false,"type":[[["Track"]]]},{"name":"index","optional":true,"default":"0","type":[[["number"]]]}],"returns":[[["void"]]],"meta":{"line":538,"file":"Queue.ts","path":"src/Structures"}},{"name":"jump","params":[{"name":"track","optional":false,"type":[[["number"," | "],["Track"]]]}],"returns":[[["void"]]],"meta":{"line":507,"file":"Queue.ts","path":"src/Structures"}},{"name":"nowPlaying","returns":[[["Track"]]],"meta":{"line":143,"file":"Queue.ts","path":"src/Structures"}},{"name":"play","params":[{"name":"src","optional":true,"type":[[["Track"]]]},{"name":"options","optional":true,"default":"{}","type":[[["PlayOptions"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":621,"file":"Queue.ts","path":"src/Structures"}},{"name":"remove","params":[{"name":"track","optional":false,"type":[[["string"," | "],["number"," | "],["Track"]]]}],"returns":[[["Track"]]],"meta":{"line":473,"file":"Queue.ts","path":"src/Structures"}},{"name":"seek","params":[{"name":"position","optional":false,"type":[[["number"]]]}],"returns":[[["Promise","<"],["boolean",">"]]],"meta":{"line":407,"file":"Queue.ts","path":"src/Structures"}},{"name":"setBitrate","params":[{"name":"bitrate","optional":false,"type":[[["number"," | "],["'auto'"]]]}],"returns":[[["void"]]],"meta":{"line":278,"file":"Queue.ts","path":"src/Structures"}},{"name":"setFilters","params":[{"name":"filters","optional":true,"type":[[["QueueFilters"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":368,"file":"Queue.ts","path":"src/Structures"}},{"name":"setPaused","params":[{"name":"paused","optional":true,"type":[[["boolean"]]]}],"returns":[[["boolean"]]],"meta":{"line":267,"file":"Queue.ts","path":"src/Structures"}},{"name":"setRepeatMode","params":[{"name":"mode","optional":false,"type":[[["QueueRepeatMode"]]]}],"returns":[[["boolean"]]],"meta":{"line":302,"file":"Queue.ts","path":"src/Structures"}},{"name":"setVolume","params":[{"name":"amount","optional":false,"type":[[["number"]]]}],"returns":[[["boolean"]]],"meta":{"line":290,"file":"Queue.ts","path":"src/Structures"}},{"name":"shuffle","returns":[[["boolean"]]],"meta":{"line":456,"file":"Queue.ts","path":"src/Structures"}},{"name":"skip","returns":[[["boolean"]]],"meta":{"line":231,"file":"Queue.ts","path":"src/Structures"}},{"name":"skipTo","params":[{"name":"track","optional":false,"type":[[["number"," | "],["Track"]]]}],"returns":[[["void"]]],"meta":{"line":522,"file":"Queue.ts","path":"src/Structures"}},{"name":"stop","returns":[[["void"]]],"meta":{"line":447,"file":"Queue.ts","path":"src/Structures"}},{"name":"toJSON","returns":[[["{"],["\nguild",": "],["string",","],["\nid",": "],["string",","],["\noptions",": "],["PlayerOptions",","],["\ntracks",": "],["Array","<"],["TrackJSON",">,"],["\nvoiceChannel",": "],["string\n","}"]]],"meta":{"line":744,"file":"Queue.ts","path":"src/Structures"}},{"name":"toString","returns":[[["string"]]],"meta":{"line":759,"file":"Queue.ts","path":"src/Structures"}}],"meta":{"line":16,"file":"Queue.ts","path":"src/Structures"}},{"name":"StreamDispatcher","extends":["TypedEmitter<VoiceEvents>"],"construct":{"name":"constructor","access":"private","params":[{"name":"connection","optional":false,"type":[[["VoiceConnection"]]]},{"name":"channel","optional":false,"type":[[["StageChannel"," | "],["VoiceChannel"]]]},{"name":"connectionTimeout","optional":true,"default":"20000","type":[[["number"]]]}],"returns":[[["StreamDispatcher"]]],"meta":{"line":44,"file":"StreamDispatcher.ts","path":"src/VoiceInterface"}},"props":[{"name":"audioPlayer","readonly":true,"type":[[["AudioPlayer"]]],"meta":{"line":32,"file":"StreamDispatcher.ts","path":"src/VoiceInterface"}},{"name":"audioResource","type":[[["AudioResource","<"],["Track",">"]]],"meta":{"line":34,"file":"StreamDispatcher.ts","path":"src/VoiceInterface"}},{"name":"channel","type":[[["StageChannel"," | "],["VoiceChannel"]]],"meta":{"line":33,"file":"StreamDispatcher.ts","path":"src/VoiceInterface"}},{"name":"connectionTimeout","readonly":true,"default":"20000","type":[[["number"]]],"meta":{"line":44,"file":"StreamDispatcher.ts","path":"src/VoiceInterface"}},{"name":"paused","type":[[["boolean"]]],"meta":{"line":36,"file":"StreamDispatcher.ts","path":"src/VoiceInterface"}},{"name":"readyLock","access":"private","default":"false","type":[[["boolean"]]],"meta":{"line":35,"file":"StreamDispatcher.ts","path":"src/VoiceInterface"}},{"name":"voiceConnection","readonly":true,"type":[[["VoiceConnection"]]],"meta":{"line":31,"file":"StreamDispatcher.ts","path":"src/VoiceInterface"}},{"name":"defaultMaxListeners","scope":"static","type":[[["number"]]],"meta":{"line":10,"file":"index.d.ts","path":"node_modules/tiny-typed-emitter/lib"}}],"methods":[{"name":"addListener","params":[{"name":"event","optional":false,"type":[[["U"]]]},{"name":"listener","optional":false,"type":[[["VoiceEvents","["],["U","]"]]]}],"returns":[[["StreamDispatcher"]]],"meta":{"line":11,"file":"index.d.ts","path":"node_modules/tiny-typed-emitter/lib"}},{"name":"createStream","params":[{"name":"src","optional":false,"type":[[["string"," | "],["Readable"," | "],["Duplex"]]]},{"name":"ops","optional":true,"type":[[["{"],["\ndata",": "],["any",","],["\ndisableVolume",": "],["boolean",","],["\ntype",": "],["StreamType\n","}"]]]}],"returns":[[["AudioResource","<"],["Track",">"]]],"meta":{"line":136,"file":"StreamDispatcher.ts","path":"src/VoiceInterface"}},{"name":"disconnect","returns":[[["void"]]],"meta":{"line":159,"file":"StreamDispatcher.ts","path":"src/VoiceInterface"}},{"name":"emit","params":[{"name":"event","optional":false,"type":[[["U"]]]},{"name":"args","optional":false,"type":[[["Parameters","<"],["VoiceEvents","["],["U","]>"]]],"variable":true}],"returns":[[["boolean"]]],"meta":{"line":19,"file":"index.d.ts","path":"node_modules/tiny-typed-emitter/lib"}},{"name":"end","returns":[[["void"]]],"meta":{"line":170,"file":"StreamDispatcher.ts","path":"src/VoiceInterface"}},{"name":"eventNames","returns":[[["Array","<"],["U",">"]]],"meta":{"line":20,"file":"index.d.ts","path":"node_modules/tiny-typed-emitter/lib"}},{"name":"getMaxListeners","returns":[[["number"]]],"meta":{"line":24,"file":"index.d.ts","path":"node_modules/tiny-typed-emitter/lib"}},{"name":"listenerCount","params":[{"name":"type","optional":false,"type":[[["keyof"," "],["VoiceEvents"]]]}],"returns":[[["number"]]],"meta":{"line":21,"file":"index.d.ts","path":"node_modules/tiny-typed-emitter/lib"}},{"name":"listeners","params":[{"name":"type","optional":false,"type":[[["U"]]]}],"returns":[[["Array","<"],["VoiceEvents","["],["U","]>"]]],"meta":{"line":22,"file":"index.d.ts","path":"node_modules/tiny-typed-emitter/lib"}},{"name":"off","params":[{"name":"event","optional":false,"type":[[["U"]]]},{"name":"listener","optional":false,"type":[[["VoiceEvents","["],["U","]"]]]}],"returns":[[["StreamDispatcher"]]],"meta":{"line":18,"file":"index.d.ts","path":"node_modules/tiny-typed-emitter/lib"}},{"name":"on","params":[{"name":"event","optional":false,"type":[[["U"]]]},{"name":"listener","optional":false,"type":[[["VoiceEvents","["],["U","]"]]]}],"returns":[[["StreamDispatcher"]]],"meta":{"line":17,"file":"index.d.ts","path":"node_modules/tiny-typed-emitter/lib"}},{"name":"once","params":[{"name":"event","optional":false,"type":[[["U"]]]},{"name":"listener","optional":false,"type":[[["VoiceEvents","["],["U","]"]]]}],"returns":[[["StreamDispatcher"]]],"meta":{"line":16,"file":"index.d.ts","path":"node_modules/tiny-typed-emitter/lib"}},{"name":"pause","params":[{"name":"interpolateSilence","optional":true,"type":[[["boolean"]]]}],"returns":[[["boolean"]]],"meta":{"line":179,"file":"StreamDispatcher.ts","path":"src/VoiceInterface"}},{"name":"playStream","params":[{"name":"resource","optional":true,"type":[[["AudioResource","<"],["Track",">"]]]}],"returns":[[["Promise","<"],["StreamDispatcher",">"]]],"meta":{"line":200,"file":"StreamDispatcher.ts","path":"src/VoiceInterface"}},{"name":"prependListener","params":[{"name":"event","optional":false,"type":[[["U"]]]},{"name":"listener","optional":false,"type":[[["VoiceEvents","["],["U","]"]]]}],"returns":[[["StreamDispatcher"]]],"meta":{"line":12,"file":"index.d.ts","path":"node_modules/tiny-typed-emitter/lib"}},{"name":"prependOnceListener","params":[{"name":"event","optional":false,"type":[[["U"]]]},{"name":"listener","optional":false,"type":[[["VoiceEvents","["],["U","]"]]]}],"returns":[[["StreamDispatcher"]]],"meta":{"line":13,"file":"index.d.ts","path":"node_modules/tiny-typed-emitter/lib"}},{"name":"rawListeners","params":[{"name":"type","optional":false,"type":[[["U"]]]}],"returns":[[["Array","<"],["VoiceEvents","["],["U","]>"]]],"meta":{"line":23,"file":"index.d.ts","path":"node_modules/tiny-typed-emitter/lib"}},{"name":"removeAllListeners","params":[{"name":"event","optional":true,"type":[[["keyof"," "],["VoiceEvents"]]]}],"returns":[[["StreamDispatcher"]]],"meta":{"line":15,"file":"index.d.ts","path":"node_modules/tiny-typed-emitter/lib"}},{"name":"removeListener","params":[{"name":"event","optional":false,"type":[[["U"]]]},{"name":"listener","optional":false,"type":[[["VoiceEvents","["],["U","]"]]]}],"returns":[[["StreamDispatcher"]]],"meta":{"line":14,"file":"index.d.ts","path":"node_modules/tiny-typed-emitter/lib"}},{"name":"resume","returns":[[["boolean"]]],"meta":{"line":189,"file":"StreamDispatcher.ts","path":"src/VoiceInterface"}},{"name":"setMaxListeners","params":[{"name":"n","optional":false,"type":[[["number"]]]}],"returns":[[["StreamDispatcher"]]],"meta":{"line":25,"file":"index.d.ts","path":"node_modules/tiny-typed-emitter/lib"}},{"name":"setVolume","params":[{"name":"value","optional":false,"type":[[["number"]]]}],"returns":[[["boolean"]]],"meta":{"line":226,"file":"StreamDispatcher.ts","path":"src/VoiceInterface"}}],"meta":{"line":30,"file":"StreamDispatcher.ts","path":"src/VoiceInterface"}},{"name":"Track","construct":{"name":"constructor","params":[{"name":"player","optional":false,"type":[[["Player"]]]},{"name":"data","optional":false,"type":[[["RawTrackData"]]]}],"returns":[[["Track"]]],"meta":{"line":26,"file":"Track.ts","path":"src/Structures"}},"props":[{"name":"author","type":[[["string"]]],"meta":{"line":11,"file":"Track.ts","path":"src/Structures"}},{"name":"description","type":[[["string"]]],"meta":{"line":10,"file":"Track.ts","path":"src/Structures"}},{"name":"duration","type":[[["string"]]],"meta":{"line":14,"file":"Track.ts","path":"src/Structures"}},{"name":"id","readonly":true,"type":[[["string"]]],"meta":{"line":19,"file":"Track.ts","path":"src/Structures"}},{"name":"player","type":[[["Player"]]],"meta":{"line":8,"file":"Track.ts","path":"src/Structures"}},{"name":"playlist","type":[[["Playlist"]]],"meta":{"line":17,"file":"Track.ts","path":"src/Structures"}},{"name":"raw","readonly":true,"type":[[["RawTrackData"]]],"meta":{"line":18,"file":"Track.ts","path":"src/Structures"}},{"name":"requestedBy","type":[[["User"]]],"meta":{"line":16,"file":"Track.ts","path":"src/Structures"}},{"name":"thumbnail","type":[[["string"]]],"meta":{"line":13,"file":"Track.ts","path":"src/Structures"}},{"name":"title","type":[[["string"]]],"meta":{"line":9,"file":"Track.ts","path":"src/Structures"}},{"name":"url","type":[[["string"]]],"meta":{"line":12,"file":"Track.ts","path":"src/Structures"}},{"name":"views","type":[[["number"]]],"meta":{"line":15,"file":"Track.ts","path":"src/Structures"}}],"methods":[{"name":"_patch","access":"private","params":[{"name":"data","optional":false,"type":[[["RawTrackData"]]]}],"returns":[[["void"]]],"meta":{"line":111,"file":"Track.ts","path":"src/Structures"}},{"name":"toJSON","params":[{"name":"hidePlaylist","optional":true,"type":[[["boolean"]]]}],"returns":[[["TrackJSON"]]],"meta":{"line":171,"file":"Track.ts","path":"src/Structures"}},{"name":"toString","returns":[[["string"]]],"meta":{"line":163,"file":"Track.ts","path":"src/Structures"}}],"meta":{"line":7,"file":"Track.ts","path":"src/Structures"}},{"name":"Util","construct":{"name":"constructor","access":"private","returns":[[["Util"]]],"meta":{"line":8,"file":"Util.ts","path":"src/utils"}},"methods":[{"name":"buildTimeCode","scope":"static","params":[{"name":"duration","optional":false,"type":[[["TimeData"]]]}],"returns":[[["string"]]],"meta":{"line":42,"file":"Util.ts","path":"src/utils"}},{"name":"durationString","scope":"static","params":[{"name":"durObj","optional":false,"type":[[["Record","<"],["string",", "],["number",">"]]]}],"returns":[[["string"]]],"meta":{"line":15,"file":"Util.ts","path":"src/utils"}},{"name":"getFetch","scope":"static","returns":[[["Promise","<"],["any",">"]]],"meta":{"line":99,"file":"Util.ts","path":"src/utils"}},{"name":"isVoiceEmpty","scope":"static","params":[{"name":"channel","optional":false,"type":[[["StageChannel"," | "],["VoiceChannel"]]]}],"returns":[[["boolean"]]],"meta":{"line":71,"file":"Util.ts","path":"src/utils"}},{"name":"last","scope":"static","params":[{"name":"arr","optional":false,"type":[[["Array","<"],["T",">"]]]}],"returns":[[["T"]]],"meta":{"line":61,"file":"Util.ts","path":"src/utils"}},{"name":"noop","scope":"static","returns":[[["void"]]],"meta":{"line":97,"file":"Util.ts","path":"src/utils"}},{"name":"parseMS","scope":"static","params":[{"name":"milliseconds","optional":false,"type":[[["number"]]]}],"returns":[[["TimeData"]]],"meta":{"line":26,"file":"Util.ts","path":"src/utils"}},{"name":"require","scope":"static","params":[{"name":"id","optional":false,"type":[[["string"]]]}],"returns":[[["any"]]],"meta":{"line":80,"file":"Util.ts","path":"src/utils"}},{"name":"wait","scope":"static","params":[{"name":"time","optional":false,"type":[[["number"]]]}],"returns":[[["Promise","<"],["unknown",">"]]],"meta":{"line":93,"file":"Util.ts","path":"src/utils"}}],"meta":{"line":4,"file":"Util.ts","path":"src/utils"}},{"name":"VoiceUtils","construct":{"name":"constructor","access":"private","returns":[[["VoiceUtils"]]],"meta":{"line":12,"file":"VoiceUtils.ts","path":"src/VoiceInterface"}},"props":[{"name":"cache","type":[[["Collection","<"],["string",", "],["StreamDispatcher",">"]]],"meta":{"line":6,"file":"VoiceUtils.ts","path":"src/VoiceInterface"}}],"methods":[{"name":"connect","params":[{"name":"channel","optional":false,"type":[[["StageChannel"," | "],["VoiceChannel"]]]},{"name":"options","optional":true,"type":[[["{"],["\ndeaf",": "],["boolean",","],["\nmaxTime",": "],["number\n","}"]]]}],"returns":[[["Promise","<"],["StreamDispatcher",">"]]],"meta":{"line":26,"file":"VoiceUtils.ts","path":"src/VoiceInterface"}},{"name":"disconnect","params":[{"name":"connection","optional":false,"type":[[["StreamDispatcher"," | "],["VoiceConnection"]]]}],"returns":[[["void"]]],"meta":{"line":67,"file":"VoiceUtils.ts","path":"src/VoiceInterface"}},{"name":"getConnection","params":[{"name":"guild","optional":false,"type":[[["string"]]]}],"returns":[[["StreamDispatcher"]]],"meta":{"line":77,"file":"VoiceUtils.ts","path":"src/VoiceInterface"}},{"name":"join","params":[{"name":"channel","optional":true,"type":[[["StageChannel"," | "],["VoiceChannel"]]]},{"name":"options","optional":true,"type":[[["{"],["\ndeaf",": "],["boolean",","],["\nmaxTime",": "],["number\n","}"]]]}],"returns":[[["Promise","<"],["VoiceConnection",">"]]],"meta":{"line":45,"file":"VoiceUtils.ts","path":"src/VoiceInterface"}}],"meta":{"line":5,"file":"VoiceUtils.ts","path":"src/VoiceInterface"}}],"typedefs":[{"name":"ErrorStatusCode","meta":{"line":1,"file":"PlayerError.ts","path":"src/Structures"},"props":[{"name":"AUDIO_PLAYER_ERROR"},{"name":"DESTROYED_QUEUE"},{"name":"INVALID_ARG_TYPE"},{"name":"INVALID_CHANNEL_TYPE"},{"name":"INVALID_EXTRACTOR"},{"name":"INVALID_TRACK"},{"name":"NO_AUDIO_RESOURCE"},{"name":"NO_CONNECTION"},{"name":"PLAYER_ERROR"},{"name":"STREAM_ERROR"},{"name":"TRACK_NOT_FOUND"},{"name":"UNKNOWN_EXTRACTOR"},{"name":"UNKNOWN_GUILD"},{"name":"UNKNOWN_REPEAT_MODE"}]},{"name":"QueryType","meta":{"line":238,"file":"types.ts","path":"src/types"},"props":[{"name":"ARBITRARY"},{"name":"AUTO"},{"name":"FACEBOOK"},{"name":"REVERBNATION"},{"name":"SOUNDCLOUD"},{"name":"SOUNDCLOUD_PLAYLIST"},{"name":"SOUNDCLOUD_SEARCH"},{"name":"SOUNDCLOUD_TRACK"},{"name":"SPOTIFY_ALBUM"},{"name":"SPOTIFY_PLAYLIST"},{"name":"SPOTIFY_SONG"},{"name":"VIMEO"},{"name":"YOUTUBE"},{"name":"YOUTUBE_PLAYLIST"},{"name":"YOUTUBE_SEARCH"},{"name":"YOUTUBE_VIDEO"}]},{"name":"QueueRepeatMode","meta":{"line":383,"file":"types.ts","path":"src/types"},"props":[{"name":"AUTOPLAY"},{"name":"OFF"},{"name":"QUEUE"},{"name":"TRACK"}]},{"name":"ExtractorModelData","meta":{"line":188,"file":"types.ts","path":"src/types"},"props":[{"name":"data","optional":false,"type":[[["Array","<{"],["\nauthor",": "],["string",","],["\ndescription",": "],["string",","],["\nduration",": "],["number",","],["\nengine",": "],["string"," | "],["Readable"," | "],["Duplex",","],["\nsource",": "],["TrackSource",","],["\nthumbnail",": "],["string",","],["\ntitle",": "],["string",","],["\nurl",": "],["string",","],["\nversion",": "],["string",","],["\nviews",": "],["number\n","}>"]]]},{"name":"playlist","optional":true,"type":[[["{"],["\nauthor",": {"],["\nname",": "],["string",","],["\nurl",": "],["string\n","},"],["\ndescription",": "],["string",","],["\nid",": "],["string",","],["\nrawPlaylist",": "],["any",","],["\nsource",": "],["TrackSource",","],["\nthumbnail",": "],["string",","],["\ntitle",": "],["string",","],["\ntype",": "],["'album'"," | "],["'playlist'",","],["\nurl",": "],["string\n","}"]]]}]},{"name":"FFmpegStreamOptions","meta":{"line":4,"file":"FFmpegStream.ts","path":"src/utils"},"props":[{"name":"encoderArgs","optional":true,"type":[[["Array","<"],["string",">"]]]},{"name":"fmt","optional":true,"type":[[["string"]]]},{"name":"seek","optional":true,"type":[[["number"]]]},{"name":"skip","optional":true,"type":[[["boolean"]]]}]},{"name":"PlayOptions","meta":{"line":356,"file":"types.ts","path":"src/types"},"props":[{"name":"encoderArgs","optional":true,"type":[[["Array","<"],["string",">"]]]},{"name":"filtersUpdate","optional":true,"type":[[["boolean"]]]},{"name":"immediate","optional":true,"type":[[["boolean"]]]},{"name":"seek","optional":true,"type":[[["number"]]]}]},{"name":"PlayerEvents","meta":{"line":333,"file":"types.ts","path":"src/types"},"props":[{"name":"botDisconnect","optional":false,"type":[[["("],["queue",": "],["Queue","<"],["unknown",">) => "],["any"]]]},{"name":"channelEmpty","optional":false,"type":[[["("],["queue",": "],["Queue","<"],["unknown",">) => "],["any"]]]},{"name":"connectionCreate","optional":false,"type":[[["("],["queue",": "],["Queue","<"],["unknown",">, "],["connection",": "],["StreamDispatcher",") => "],["any"]]]},{"name":"connectionError","optional":false,"type":[[["("],["queue",": "],["Queue","<"],["unknown",">, "],["error",": "],["Error",") => "],["any"]]]},{"name":"debug","optional":false,"type":[[["("],["queue",": "],["Queue","<"],["unknown",">, "],["message",": "],["string",") => "],["any"]]]},{"name":"error","optional":false,"type":[[["("],["queue",": "],["Queue","<"],["unknown",">, "],["error",": "],["Error",") => "],["any"]]]},{"name":"queueEnd","optional":false,"type":[[["("],["queue",": "],["Queue","<"],["unknown",">) => "],["any"]]]},{"name":"trackAdd","optional":false,"type":[[["("],["queue",": "],["Queue","<"],["unknown",">, "],["track",": "],["Track",") => "],["any"]]]},{"name":"trackEnd","optional":false,"type":[[["("],["queue",": "],["Queue","<"],["unknown",">, "],["track",": "],["Track",") => "],["any"]]]},{"name":"trackStart","optional":false,"type":[[["("],["queue",": "],["Queue","<"],["unknown",">, "],["track",": "],["Track",") => "],["any"]]]},{"name":"tracksAdd","optional":false,"type":[[["("],["queue",": "],["Queue","<"],["unknown",">, "],["track",": "],["Array","<"],["Track",">) => "],["any"]]]}]},{"name":"PlayerInitOptions","meta":{"line":483,"file":"types.ts","path":"src/types"},"props":[{"name":"autoRegisterExtractor","optional":true,"type":[[["boolean"]]]},{"name":"connectionTimeout","optional":true,"type":[[["number"]]]},{"name":"ytdlOptions","optional":true,"type":[[["downloadOptions"]]]}]},{"name":"PlayerOptions","meta":{"line":143,"file":"types.ts","path":"src/types"},"props":[{"name":"autoSelfDeaf","optional":true,"type":[[["boolean"]]]},{"name":"bufferingTimeout","optional":true,"type":[[["number"]]]},{"name":"disableVolume","optional":true,"type":[[["boolean"]]]},{"name":"initialVolume","optional":true,"type":[[["number"]]]},{"name":"leaveOnEmpty","optional":true,"type":[[["boolean"]]]},{"name":"leaveOnEmptyCooldown","optional":true,"type":[[["number"]]]},{"name":"leaveOnEnd","optional":true,"type":[[["boolean"]]]},{"name":"leaveOnStop","optional":true,"type":[[["boolean"]]]},{"name":"onBeforeCreateStream","optional":true,"type":[[["("],["track",": "],["Track",", "],["source",": "],["TrackSource",", "],["queue",": "],["Queue","<"],["unknown",">) => "],["Promise","<"],["Readable",">"]]]},{"name":"spotifyBridge","optional":true,"type":[[["boolean"]]]},{"name":"volumeSmoothness","optional":true,"type":[[["number"]]]},{"name":"ytdlOptions","optional":true,"type":[[["downloadOptions"]]]}]},{"name":"PlayerProgressbarOptions","meta":{"line":119,"file":"types.ts","path":"src/types"},"props":[{"name":"indicator","optional":true,"type":[[["string"]]]},{"name":"length","optional":true,"type":[[["number"]]]},{"name":"line","optional":true,"type":[[["string"]]]},{"name":"queue","optional":true,"type":[[["boolean"]]]},{"name":"timecodes","optional":true,"type":[[["boolean"]]]}]},{"name":"PlayerSearchResult","meta":{"line":11,"file":"types.ts","path":"src/types"},"props":[{"name":"playlist","optional":false,"type":[[["Playlist"]]]},{"name":"tracks","optional":false,"type":[[["Array","<"],["Track",">"]]]}]},{"name":"PlaylistInitData","meta":{"line":405,"file":"types.ts","path":"src/types"},"props":[{"name":"author","optional":false,"type":[[["{"],["\nname",": "],["string",","],["\nurl",": "],["string\n","}"]]]},{"name":"description","optional":false,"type":[[["string"]]]},{"name":"id","optional":false,"type":[[["string"]]]},{"name":"rawPlaylist","optional":true,"type":[[["any"]]]},{"name":"source","optional":false,"type":[[["TrackSource"]]]},{"name":"thumbnail","optional":false,"type":[[["string"]]]},{"name":"title","optional":false,"type":[[["string"]]]},{"name":"tracks","optional":false,"type":[[["Array","<"],["Track",">"]]]},{"name":"type","optional":false,"type":[[["'album'"," | "],["'playlist'"]]]},{"name":"url","optional":false,"type":[[["string"]]]}]},{"name":"PlaylistJSON","meta":{"line":462,"file":"types.ts","path":"src/types"},"props":[{"name":"author","optional":false,"type":[[["{"],["\nname",": "],["string",","],["\nurl",": "],["string\n","}"]]]},{"name":"description","optional":false,"type":[[["string"]]]},{"name":"id","optional":false,"type":[[["string"]]]},{"name":"source","optional":false,"type":[[["TrackSource"]]]},{"name":"thumbnail","optional":false,"type":[[["string"]]]},{"name":"title","optional":false,"type":[[["string"]]]},{"name":"tracks","optional":false,"type":[[["Array","<"],["TrackJSON",">"]]]},{"name":"type","optional":false,"type":[[["'album'"," | "],["'playlist'"]]]},{"name":"url","optional":false,"type":[[["string"]]]}]},{"name":"QueueFilters","meta":{"line":19,"file":"types.ts","path":"src/types"},"props":[{"name":"8D","optional":true,"type":[[["boolean"]]]},{"name":"bassboost","optional":true,"type":[[["boolean"]]]},{"name":"bassboost_high","optional":true,"type":[[["boolean"]]]},{"name":"bassboost_low","optional":true,"type":[[["boolean"]]]},{"name":"chorus","optional":true,"type":[[["boolean"]]]},{"name":"chorus2d","optional":true,"type":[[["boolean"]]]},{"name":"chorus3d","optional":true,"type":[[["boolean"]]]},{"name":"compressor","optional":true,"type":[[["boolean"]]]},{"name":"dim","optional":true,"type":[[["boolean"]]]},{"name":"earrape","optional":true,"type":[[["boolean"]]]},{"name":"expander","optional":true,"type":[[["boolean"]]]},{"name":"fadein","optional":true,"type":[[["boolean"]]]},{"name":"flanger","optional":true,"type":[[["boolean"]]]},{"name":"gate","optional":true,"type":[[["boolean"]]]},{"name":"haas","optional":true,"type":[[["boolean"]]]},{"name":"karaoke","optional":true,"type":[[["boolean"]]]},{"name":"mcompand","optional":true,"type":[[["boolean"]]]},{"name":"mono","optional":true,"type":[[["boolean"]]]},{"name":"mstlr","optional":true,"type":[[["boolean"]]]},{"name":"mstrr","optional":true,"type":[[["boolean"]]]},{"name":"nightcore","optional":true,"type":[[["boolean"]]]},{"name":"normalizer","optional":true,"type":[[["boolean"]]]},{"name":"normalizer2","optional":true,"type":[[["boolean"]]]},{"name":"phaser","optional":true,"type":[[["boolean"]]]},{"name":"pulsator","optional":true,"type":[[["boolean"]]]},{"name":"reverse","optional":true,"type":[[["boolean"]]]},{"name":"softlimiter","optional":true,"type":[[["boolean"]]]},{"name":"subboost","optional":true,"type":[[["boolean"]]]},{"name":"surrounding","optional":true,"type":[[["boolean"]]]},{"name":"treble","optional":true,"type":[[["boolean"]]]},{"name":"tremolo","optional":true,"type":[[["boolean"]]]},{"name":"vaporwave","optional":true,"type":[[["boolean"]]]},{"name":"vibrato","optional":true,"type":[[["boolean"]]]}]},{"name":"RawTrackData","meta":{"line":81,"file":"types.ts","path":"src/types"},"props":[{"name":"author","optional":false,"type":[[["string"]]]},{"name":"description","optional":false,"type":[[["string"]]]},{"name":"duration","optional":false,"type":[[["string"]]]},{"name":"engine","optional":true,"type":[[["any"]]]},{"name":"live","optional":true,"type":[[["boolean"]]]},{"name":"playlist","optional":true,"type":[[["Playlist"]]]},{"name":"raw","optional":true,"type":[[["any"]]]},{"name":"requestedBy","optional":false,"type":[[["User"]]]},{"name":"source","optional":true,"type":[[["TrackSource"]]]},{"name":"thumbnail","optional":false,"type":[[["string"]]]},{"name":"title","optional":false,"type":[[["string"]]]},{"name":"url","optional":false,"type":[[["string"]]]},{"name":"views","optional":false,"type":[[["number"]]]}]},{"name":"SearchOptions","meta":{"line":369,"file":"types.ts","path":"src/types"},"props":[{"name":"blockExtractor","optional":true,"type":[[["boolean"]]]},{"name":"requestedBy","optional":false,"type":[[["UserResolvable"]]]},{"name":"searchEngine","optional":true,"type":[[["string"," | "],["QueryType"]]]}]},{"name":"TimeData","meta":{"line":104,"file":"types.ts","path":"src/types"},"props":[{"name":"days","optional":false,"type":[[["number"]]]},{"name":"hours","optional":false,"type":[[["number"]]]},{"name":"minutes","optional":false,"type":[[["number"]]]},{"name":"seconds","optional":false,"type":[[["number"]]]}]},{"name":"TrackJSON","meta":{"line":434,"file":"types.ts","path":"src/types"},"props":[{"name":"author","optional":false,"type":[[["string"]]]},{"name":"description","optional":false,"type":[[["string"]]]},{"name":"duration","optional":false,"type":[[["string"]]]},{"name":"durationMS","optional":false,"type":[[["number"]]]},{"name":"id","optional":false,"type":[[["string"]]]},{"name":"playlist","optional":true,"type":[[["PlaylistJSON"]]]},{"name":"requestedBy","optional":false,"type":[[["string"]]]},{"name":"thumbnail","optional":false,"type":[[["string"]]]},{"name":"title","optional":false,"type":[[["string"]]]},{"name":"url","optional":false,"type":[[["string"]]]},{"name":"views","optional":false,"type":[[["number"]]]}]},{"name":"VoiceEvents","meta":{"line":21,"file":"StreamDispatcher.ts","path":"src/VoiceInterface"},"props":[{"name":"debug","optional":false,"type":[[["("],["message",": "],["string",") => "],["any"]]]},{"name":"error","optional":false,"type":[[["("],["error",": "],["AudioPlayerError",") => "],["any"]]]},{"name":"finish","optional":false,"type":[[["("],["resource",": "],["AudioResource","<"],["Track",">) => "],["any"]]]},{"name":"start","optional":false,"type":[[["("],["resource",": "],["AudioResource","<"],["Track",">) => "],["any"]]]}]},{"name":"FiltersName","type":[[["keyof"," "],["QueueFilters"]]],"meta":{"line":9,"file":"types.ts","path":"src/types"}},{"name":"TrackSource","type":[[["'soundcloud'"," | "],["'youtube'"," | "],["'spotify'"," | "],["'arbitrary'"]]],"meta":{"line":63,"file":"types.ts","path":"src/types"}}]}